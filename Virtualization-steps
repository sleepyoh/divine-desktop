#!/usr/bin/env bash
#
# This script sets up essential directories, permissions, ownership, and SELinux contexts
# for libvirt and swtpm on a booted system, *after* the base image has been deployed.
# It is intended for use when these configurations are not fully handled by the Containerfile
# or package post-installation scripts in an immutable OS environment.
#
# IMPORTANT: Run this script with sudo or as root.
#
set -euo pipefail # Exit immediately if a command exits with a non-zero status,
                  # exit if an unset variable is used, and pipefail.

echo "--- Starting manual libvirt and swtpm setup script ---"

# --- Step 1: Ensure necessary system users and groups exist ---
# The 'id' command checks if a user exists. If not, 'useradd' creates them.
# '--system': creates a system user (UID < 1000, no login shell by default).
# '--no-create-home': prevents creation of a home directory.
# '--shell /sbin/nologin': assigns a shell that prevents direct login.

echo "Checking and creating 'qemu' user and group..."
# Check for 'qemu' group, create if not exists
if ! getent group qemu > /dev/null; then
    sudo groupadd --system qemu
    echo "Group 'qemu' created."
fi
# Check for 'qemu' user, create if not exists and add to 'qemu' group
if ! id qemu &>/dev/null; then
    sudo useradd --system --no-create-home --shell /sbin/nologin -g qemu qemu
    echo "User 'qemu' created and added to 'qemu' group."
else
    # Ensure qemu user is in qemu group if it already exists but might be missing group membership
    if ! id -Gn qemu | grep -qw qemu; then
        sudo usermod -a -G qemu qemu
        echo "User 'qemu' added to 'qemu' group."
    fi
fi

echo "Checking and creating 'tss' user and group (for swtpm)..."
# Check for 'tss' group, create if not exists
if ! getent group tss > /dev/null; then
    sudo groupadd --system tss
    echo "Group 'tss' created."
fi
# Check for 'tss' user, create if not exists and add to 'tss' group
if ! id tss &>/dev/null; then
    sudo useradd --system --no-create-home --shell /sbin/nologin -g tss tss
    echo "User 'tss' created and added to 'tss' group."
else
    # Ensure tss user is in tss group
    if ! id -Gn tss | grep -qw tss; then
        sudo usermod -a -G tss tss
        echo "User 'tss' added to 'tss' group."
    fi
fi


# --- Step 2: Check for and create necessary directories ---
# These are the directories libvirt and swtpm rely on.
echo "Checking and creating essential directories..."
LIBVIRT_DIRS=(
    "/var/lib/libvirt/qemu"
    "/var/lib/libvirt/qemu/nvram"
    "/var/lib/libvirt/images"
    "/var/lib/libvirt/dnsmasq"
)
SWTPM_DIRS=(
    "/var/lib/swtpm-localca"
    "/var/log/swtpm"
    "/var/log/swtpm/libvirt"
    "/var/log/swtpm/libvirt/qemu"
)

# Create libvirt-related directories
for dir in "${LIBVIRT_DIRS[@]}"; do
    if [ ! -d "$dir" ]; then
        echo "Creating directory: $dir"
        sudo mkdir -p "$dir"
    fi
done

# Create swtpm-related directories
for dir in "${SWTPM_DIRS[@]}"; do
    if [ ! -d "$dir" ]; then
        echo "Creating directory: $dir"
        sudo mkdir -p "$dir"
    fi
done

# --- Step 3: Set specific ownership and permissions ---
# Based on our debugging, these are the permissions that worked reliably.
echo "Setting specific ownership and permissions for directories..."

# General libvirt directories (root:root, 0755)
# This was confirmed to work for /images despite being 0755, likely due to SELinux.
sudo chown root:root /var/lib/libvirt
sudo chmod 0755 /var/lib/libvirt
sudo chown root:root /var/lib/libvirt/images
sudo chmod 0755 /var/lib/libvirt/images

# Directories requiring qemu group write access (root:qemu, 0770)
# These were problematic with 0755 root:root and needed 0770 root:qemu to function.
sudo chown root:qemu /var/lib/libvirt/qemu
sudo chmod 0770 /var/lib/libvirt/qemu
sudo chown root:qemu /var/lib/libvirt/qemu/nvram
sudo chmod 0770 /var/lib/libvirt/qemu/nvram
sudo chown root:qemu /var/lib/libvirt/dnsmasq
sudo chmod 0770 /var/lib/libvirt/dnsmasq

# swtpm-localca directory (tss:tss, 0700) - CRUCIAL for swtpm_setup
sudo chown tss:tss /var/lib/swtpm-localca
sudo chmod 0700 /var/lib/swtpm-localca

# swtpm log directories (root:root, 0755)
sudo chown root:root /var/log/swtpm
sudo chmod 0755 /var/log/swtpm
sudo chown root:root /var/log/swtpm/libvirt
sudo chmod 0755 /var/log/swtpm/libvirt
sudo chown root:root /var/log/swtpm/libvirt/qemu
sudo chmod 0755 /var/log/swtpm/libvirt/qemu


# --- Step 4: Restore SELinux contexts ---
# This is often the most critical step on SELinux-enforcing systems.
# It ensures the correct security labels are applied, allowing processes to access files.
echo "Restoring SELinux contexts for all relevant directories..."
sudo restorecon -rv /var/lib/libvirt
sudo restorecon -rv /var/log/libvirt
sudo restorecon -rv /var/lib/swtpm-localca
sudo restorecon -rv /var/log/swtpm

# --- Step 5: Restart libvirtd service ---
# Restarting the service ensures it picks up any new permissions or configurations.
echo "Restarting libvirtd service..."
sudo systemctl restart libvirtd.service

echo "--- Setup complete. Verifying final directory states... ---"

# --- Verification Step: Display final permissions and SELinux contexts ---
ls -ldZ \
    /var/lib/libvirt \
    /var/lib/libvirt/images \
    /var/lib/libvirt/qemu \
    /var/lib/libvirt/qemu/nvram \
    /var/lib/libvirt/dnsmasq \
    /var/lib/swtpm-localca \
    /var/log/swtpm \
    /var/log/swtpm/libvirt \
    /var/log/swtpm/libvirt/qemu

echo "--- Script execution finished. Please try starting your VM now. ---"